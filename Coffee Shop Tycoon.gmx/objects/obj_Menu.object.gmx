<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Item=HM_MAINMENU;
Title="";

ItemName=0; //The name of each item on this page
ItemTarg=0; //The target page if you click this
ItemMax=-1;
ResetOptions=true;

Fadeout=false;
Fade=0;

InfoW=0;
InfoH=0;
InfoA=0;
InfoT="";
InfoDrawW=0;
InfoDrawH=0;
InfoDataMax=-1;
InfoDataCell1[0]="";
InfoDataCell2[0]="";
InfoDataSliderType[0] = ""
InfoDataIsSlider[0] = false;
InfoDataSliderValue[0]="";
InfoDataSliderValueMax[0]="";
InfoDataSliderValueMin[0]="";
InfoScrollY=0;
InfoScrollYMin=0;
DrawScrollY=view_hview[0]*0.6;
DrawScrollYMin=0;
DrawScrollYMax=0;
DrawScrollReset=0;
InfoSurface=surface_create(1024,2048);
HasScrollbar=0;

Holding=0;

instance_deactivate_object(obj_creator);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger fadeout

Fadeout=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control fading

//Fading of entire Head Menu
Fade=lerp(Fade,Fadeout==false,0.15);
//if( Fadeout==true &amp;&amp; Fade&lt;0.05 ) //instance_destroy();

//Fading/scaling of Info 
InfoDrawW=lerp(InfoDrawW,InfoW,0.2);
InfoDrawH=lerp(InfoDrawH,InfoH,0.2);
InfoA=lerp(InfoA,( InfoW&gt;1 ),0.2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Automatically set the button contents of the page
if keyboard_check_released(vk_escape) {
    instance_deactivate_object(obj_creator);
    ResetOptions = true;
    if (Item != HM_MAINMENU) {
        Fadeout=false;
        Item =  HM_MAINMENU;
    } else {
        Item = HM_PLAY
    }
}

if( ResetOptions )
{
    InfoDataMaxP = InfoDataMax;
    
    ItemMaxP=ItemMax; ItemMax=-1; //Clickable variables
    
    InfoW=0; InfoT=""; InfoDataMax=-1; InfoScrollY=0; DrawScrollReset=1; //Information window
    
    if( Item==HM_MAINMENU )
    {
        Title="DAY 1";
        InitMenuItem("Recipe",HM_COFFEERECIPE);
        InitMenuItem("Resume",HM_PLAY);
        //InitMenuItem("Build",HM_BUILD);
        //InitMenuItem("Settings",HM_SETTINGS);
        //InitMenuItem("Exit",HM_EXIT);
    }
    else if( Item==HM_COFFEERECIPE )
    {
        //Title="Coffee Recipe";
        ItemMax=ItemMaxP;

        SetInfoWindow("Coffee Recipe",500);
        SetSliderRow(CF_COFFEEAMT, "Coffee Amount","lbs",global.coffeeAmount,global.coffeeAmountMax,global.coffeeAmountMin);
        SetSliderRow(CF_WATERTEMP, "Water Temp","deg",global.waterTemp,global.waterTempMax,global.waterTempMin);
        SetSliderRow(CF_BREWTIME,"Brew Time","min",global.brewTime,global.brewTimeMax,global.brewTimeMin);

        SetInfoRow("Time","3 mins");
        SetInfoRow("Cost","$0.14");
        SetInfoRow("Sell at","$1.00");
        
        //InitMenuItem("Update",HM_UPDATE);
        //InitMenuItem("Back",HM_MAINMENU);

    }
    else if( Item==HM_UPDATE )
    {
        //InitMenuItem("New",HM_NEW);
        //InitMenuItem("Load",HM_LOAD);
        //InitMenuItem("Back",HM_MAINMENU);
        for(i=0;i&lt;=InfoDataMaxP;i+=1)
        {
            if (InfoDataSliderType[i]==CF_COFFEEAMT){
                global.coffeeAmount = InfoDataSliderValue[i];
            } else if (InfoDataSliderType[i]==CF_WATERTEMP){
                global.waterTemp = InfoDataSliderValue[i];
            } else if (InfoDataSliderType[i]==CF_BREWTIME){
                global.brewTime = InfoDataSliderValue[i];
            }
        }
        //UpdateRowInfo("Time",global.waterTemp*0.01 + global.brewTime + global.coffeeAmount * 0.01);
        //UpdateRowInfo("Cost",global.waterTemp*0.01 + global.brewTime*0.01 + global.coffeeAmount * 1.2);
        //UpdateRowInfo("Sell at","$1.00");
        ItemMax=ItemMaxP;
        InfoDataMax=InfoDataMaxP;
    }
    else if( Item==HM_PLAY )
    {
        Fadeout=true;
        instance_activate_object(obj_creator);
       // Title="SETTINGS";
        //InitMenuItem("Controls",HM_SETTINGSCONTROLS);
        //InitMenuItem("Graphics",HM_SETTINGSGRAPHICS);
        //InitMenuItem("Sound",HM_SETTINGSSOUND);
        //InitMenuItem("Back",HM_MAINMENU);
    }
    /*
    else if( Item==HM_SETTINGSCONTROLS )
    {
        Title="CONTROLS";
        InitMenuItem("Game",HM_SETTINGSCONTROLSGAME);
        InitMenuItem("Editor",HM_SETTINGSCONTROLSEDITOR);
        InitMenuItem("Back",HM_SETTINGS);
    }
    else if( Item==HM_SETTINGSCONTROLSGAME )
    {
        ItemMax=ItemMaxP;
        SetInfoWindow("Driving",500);
        SetInfoRow("Action","Key");
        SetInfoRow("Accelerate","W");
        SetInfoRow("Brake/Reverse","S");
        SetInfoRow("Steer Left","A");
        SetInfoRow("Steer Right","D");
        SetInfoRow("Handbrake","Space");
    }
    else if( Item==HM_SETTINGSCONTROLSEDITOR )
    {
        ItemMax=ItemMaxP;
        SetInfoWindow("Editing",500);
        SetInfoRow("Action","Key");
        SetInfoRow("Accelerate","W");
        SetInfoRow("Brake/Reverse","S");
        SetInfoRow("Steer Left","A");
        SetInfoRow("Steer Right","D");
        SetInfoRow("Handbrake","Space");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
        SetInfoRow("Open Menu","Esc");
    }
    else if( Item==HM_SETTINGSGRAPHICS )
    {
        Title="GRAPHICS"
        InitMenuItem("Back",HM_SETTINGS);
    }
    else if( Item==HM_SETTINGSSOUND )
    {
        Title="SOUND"
        InitMenuItem("Back",HM_SETTINGS);
    }
    else if( Item==HM_NEW )
    {
        ItemMax=ItemMaxP;
        Fadeout=true;
        NewMap();
    }
    else if( Item==HM_RESUME )
    {
        ItemMax=ItemMaxP;
        Fadeout=true;
    }
    else if( Item==HM_LOAD )
    {
        Title="LOADING..."
        InitMenuItem("",HM_LOAD)
        alarm[0]=30 //Game will fadeout when this runs out
        with(oMap) event_perform(ev_keypress,vk_f3)
    }
    else if( Item==HM_EXIT )
    {
        Title="REALLY EXIT?";
        InitMenuItem("Yes",HM_QUITGAME);
        InitMenuItem("No",HM_MAINMENU);
    }
    else if( Item==HM_QUITGAME )
    {
        game_end();
    }
    */
    else if( ItemMax==-1 )
    {
        Title="MISSINGNO";
        InitMenuItem("Back",HM_MAINMENU);
    }
    
    ResetOptions=false;
}


for(i=0;i&lt;=InfoDataMax;i+=1)
{
    if (InfoDataSliderType[i]==CF_COFFEEAMT){
        global.coffeeAmount = InfoDataSliderValue[i];
    } else if (InfoDataSliderType[i]==CF_WATERTEMP){
        global.waterTemp = InfoDataSliderValue[i];
    } else if (InfoDataSliderType[i]==CF_BREWTIME){
        global.brewTime = InfoDataSliderValue[i];
    }
}
UpdateRowInfo("Time",string(timeFormula(global.waterTemp,global.brewTime,global.coffeeAmount)) + " min");
UpdateRowInfo("Cost","$" + string(costFormula(global.waterTemp,global.brewTime,global.coffeeAmount)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Holding=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Head Menu background &amp; button

var backscale=max(view_wview[0]/1920,view_hview[0]/1920);
//draw_sprite_ext(sHMBack,0,view_wview[0]/2,view_hview[0]/2,backscale,backscale,0,c_white,Fade); TODO

draw_set_alpha(Fade)

draw_set_font(fTwCenBoldL)
draw_set_halign(fa_left)
draw_set_valign(fa_bottom)
draw_set_color(c_white)

draw_text(view_wview[0]*0.1,(view_hview[0]*0.45)-((1-Fade)*200),Title);

draw_set_font(fTwCenL)

for(i=0;i&lt;=ItemMax;i+=1)
{
    var xx=(view_wview[0]*0.1)-((1-Fade)*200);
    var yy=(view_hview[0]*0.55)+(i*50);
    var al=Fade*0.6;
    
    //If you hover over the text, make it brighter
    if( mouse_rectangle(xx,yy-string_height(ItemName[i]),xx+string_width(ItemName[i]),yy) )
    {
        al=Fade;
    }
    
    //If you click the text, go to its target 
    if( mouse_click_rectangle(xx,yy-string_height(ItemName[i]),xx+string_width(ItemName[i]),yy) )
    {
        Item=ItemTarg[i];
        ResetOptions=true;
    }
    
    draw_set_alpha(al)
    draw_text(xx,yy,ItemName[i])    
}

draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Info Window

if( InfoA&gt;0.05 ) //If the transparency of the window is under a certain point, skip drawing it
{
    //Initialise the window surface
    if( !surface_exists(InfoSurface) ) {InfoSurface=surface_create(1024,2048);}
    d3d_end();
    d3d_transform_set_identity();
    surface_set_target(InfoSurface);
    draw_clear_alpha(c_black,0.7);
    

    //Set the coordinates for the edges of the info window
    var swx1=round(view_wview[0]*0.3), swy1=round((view_hview[0]*0.6)-(InfoDrawH/2));
    var swx2=round(swx1+InfoDrawW), swy2=round(swy1+InfoDrawH);
    var iwx1=0, iwy1=0;
    var iwx2=round(iwx1+InfoDrawW), iwy2=round(iwy1+InfoDrawH);
    var xx=iwx1+30, yy=iwy1; col=c_black; //Dynamic drawing coordinates
    var MaxHeight=500;
    
    //Draw the contents of the window
    draw_set_alpha(sqr(InfoA));
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
    
    //Title
    draw_set_font(fTwCenL);
    yy+=30;
    draw_text(xx,yy+5,InfoT);
    
    //Table Contents
    draw_set_font(fTwCenM);
    for(i=0;i&lt;=InfoDataMax;i+=1)
    {
        yy+=40;
        
        if( round(i/2)==i/2 ) //If you're on an even number, tint the colour behind it
        {
            draw_set_alpha(sqr(InfoA)*0.2);
            draw_rectangle(iwx1,yy,iwx2-(HasScrollbar*sprite_get_width(sScrollbar)),yy+40,0);
            draw_set_alpha(sqr(InfoA));
        }
        
        draw_text(xx,yy+20,InfoDataCell1[i])
        if (InfoDataIsSlider[i]) {
            //draw_sprite_ext(sHMInfoWindowSH,0,mean(xx,iwx2),swy1,(InfoDrawW-14)/16,1,0,c_white,InfoA);
            var range = InfoDataSliderValueMax[i] - InfoDataSliderValueMin[i];
            var slidervalue = (InfoDataSliderValue[i] - InfoDataSliderValueMin[i]) / range;
           
            
            var leftSlider = mean(xx,iwx2)
            var sliderSize = iwx2 - leftSlider - HasScrollbar*sprite_get_width(sScrollbar) - 30;
            draw_sprite_ext(sHMInfoWindowSV,0,leftSlider + sliderSize*slidervalue,yy+21,1,1,0,c_white,1);
            draw_line(mean(xx,iwx2),yy+20,leftSlider + sliderSize,yy+20);
            if( mouse_hold_rectangle(   leftSlider + swx1,
                                        yy + swy1,
                                        leftSlider+sliderSize + swx1,
                                        yy+40 + swy1))
            {
                InfoDataSliderValue[i] = InfoDataSliderValueMin[i] + clamp((device_mouse_raw_x(0)-leftSlider-swx1) / sliderSize,0,1) * range;
                draw_text(mean(xx,iwx2),yy+20,InfoDataSliderValue[i])
            }
        } else  {
            draw_text(mean(xx,iwx2),yy+20,InfoDataCell2[i])
        }
    }
    
    yy+=50;
    InfoH=yy-iwy1;
    
    //If the window is too big, enable the scrollbar
    if( InfoH&gt;MaxHeight )
    {
        InfoScrollYMin=(MaxHeight-InfoH);
        InfoH=MaxHeight;
        HasScrollbar=1;
    }
    else
    {
        InfoScrollYMin=0;
        HasScrollbar=0;
    }
    
    //Reset and draw the surface
    surface_reset_target()
    draw_surface_part(InfoSurface,0,floor(-InfoScrollY),iwx2-iwx1,iwy2-iwy1,swx1,swy1);
    
    //If necessary, draw/control the scrollbar
    if( InfoScrollYMin&lt;0 )
    {
        DrawScrollYMin=swy1+sprite_get_width(sScrollbar);
        DrawScrollYMax=swy2-sprite_get_width(sScrollbar)-sprite_get_height(sScrollbar);
        
        if( DrawScrollReset==1 )
        {
            DrawScrollY=DrawScrollYMin;
            if( floor(InfoDrawH)==floor(InfoH) ) {DrawScrollReset=0;}
        }
        
        if( mouse_click_rectangle(swx2-sprite_get_width(sScrollbar),DrawScrollYMin,swx2,swy2-sprite_get_width(sScrollbar)) )
        {
            Holding=1 //Dragging the scrollbar
        }
        else if( mouse_click_rectangle(swx2-sprite_get_width(sScrollbar),swy1,swx2,swy1+sprite_get_width(sScrollbar)) )
        {
            Holding=2 //Click Scroll Up
        }
        else if( mouse_click_rectangle(swx2-sprite_get_width(sScrollbar),swy2-sprite_get_width(sScrollbar),swx2,swy2) )
        {
            Holding=3 //Click Scroll Down
        }
        if( Holding&gt;0 )
        {
            if( Holding==1 ) DrawScrollY=clamp(device_mouse_raw_y(0)-sprite_get_width(sScrollbar),DrawScrollYMin,DrawScrollYMax);
            if( Holding==2 ) DrawScrollY=clamp(DrawScrollY-10,DrawScrollYMin,DrawScrollYMax);
            if( Holding==3 ) DrawScrollY=clamp(DrawScrollY+10,DrawScrollYMin,DrawScrollYMax);
            
            InfoScrollY=lerp(0,InfoScrollYMin,(DrawScrollY-DrawScrollYMin)/(DrawScrollYMax-DrawScrollYMin));
            DrawScrollReset=0;
        }
        
        draw_sprite(sScrollbar,0,swx2,DrawScrollY)
        
        //Draw/control buttons, etc
        draw_sprite_ext(sScrollbarUp,0,swx2,swy1,1,1,0,c_white,sqr(InfoA));
        draw_sprite_ext(sScrollbarDown,0,swx2,swy2,1,1,0,c_white,sqr(InfoA));
        draw_sprite_ext(sHMInfoWindowSV,0,swx2-sprite_get_width(sScrollbar),mean(swy1,swy2),
                        1,(InfoDrawH-(2*sprite_get_width(sScrollbar)))/16,0,c_white,sqr(InfoA));
                       
                
    }
    
    InfoScrollY=clamp(InfoScrollY,InfoScrollYMin,0);
    
    //Draw the glowy outline of the window
    draw_sprite_ext(sHMInfoWindowC,0,swx1  ,swy1  ,1,1,  0,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowC,0,swx1  ,swy2+1,1,1, 90,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowC,0,swx2+1,swy2+1,1,1,180,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowC,0,swx2+1,swy1  ,1,1,270,c_white,InfoA);
    
    draw_sprite_ext(sHMInfoWindowSH,0,mean(swx1,swx2),swy1,(InfoDrawW-14)/16,1,0,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowSH,0,mean(swx1,swx2),swy2,(InfoDrawW-14)/16,1,0,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowSV,0,swx1,mean(swy1,swy2),1,(InfoDrawH-14)/16,0,c_white,InfoA);
    draw_sprite_ext(sHMInfoWindowSV,0,swx2,mean(swy1,swy2),1,(InfoDrawH-14)/16,0,c_white,InfoA);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    
    d3d_start();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
