<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_customer1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_team_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ePop = obj_variableManager_enemy.popularity + 100
hPop = obj_variableManager_team.popularity + 100

pop = ePop + hPop
var r = random(pop + 10)
if (r &lt;= ePop) team = 1;
else if (r &lt;= pop) team = 0
else team = choose(0,1);

thirsty = true;
outside = true;
color = choose(c_white,c_green,c_blue,c_red,c_fuchsia);

reversed = false;
showGrid = false;

grid = mp_grid_create(0,0,room_width/16,room_height/16,16,16);
mp_grid_add_instances(grid,objWall,0);
mp_grid_add_instances(grid,obj_table,0);
path = path_add();
var n = floor(random(instance_number(getTObject(obj_cashier)))) // get a random whole number based on obj amount
var inst = instance_find( getTObject(obj_cashier) , n ) // find that n'th instance of that type
mp_grid_path(grid,path,x,y,inst.x,inst.y+46,1);
path_start(path,1+random(2),false,true);
endX = inst.x;
endY = inst.y;

happiness = 0;
money = random(15);
hasCoffee = false
enjoy = false
image_alpha = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1000+random(1000)</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>(getTObject(obj_variableManager)).popularity += happiness
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var enjoy = true
if(enjoy == true) {
    thirsty = true
} else {
    thirsty = false
}
reversed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enjoy = false
if (random(5) &lt; 2 and hasCoffee == true and happiness &gt; 1) enjoy = true;
else if (random(5) &lt; 2 and happiness &lt; -4) {
    team = (team + 1) mod 2 // other team
    enjoy = true // need new name for variable
    happiness += 2+random(2);
}


if(enjoy == true) {
    thirsty = true
    path = path_add();
    
    var inst = instance_nearest(x,y,obj_cashier);
    if (random(25) &gt; 2) team = inst.team;
    
    var n = floor(random(instance_number(getTObject(obj_cashier)))) // get a random whole number based on obj amount
    var inst = instance_find( getTObject(obj_cashier) , n ) // find that n'th instance of that type
    mp_grid_path(grid,path,x,y,inst.x,inst.y+46,1);
    path_start(path,1+random(2),false,true);
    
} else {
    thirsty = false
}
reversed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (thirsty == true) {
    cash = instance_nearest(x,y,obj_cashier);
    if (distance_to_object(cash) &lt;= 1 and cash.coffeeCount &gt; 0) {
        thirsty = false;
        hasCoffee = true
        var taste = tasteFormula(getTObject(obj_variableManager).waterTemp,
                                  getTObject(obj_variableManager).brewTime,
                                  getTObject(obj_variableManager).coffeeAmount);
        if (taste &gt; 0) {
            happiness += taste / ((getTObject(obj_variableManager)).coffeePrice + 0.01);
        } else {
            happiness += taste * ((getTObject(obj_variableManager)).coffeePrice + 0.01)
        }
        team = cash.team;
        (getTObject(obj_variableManager)).money += (getTObject(obj_variableManager)).coffeePrice;
        var textObj =  instance_create(x,y,obj_text);
        textObj.text = "+$" + string((getTObject(obj_variableManager)).coffeePrice);
        textObj.color = c_green;
        with cash {
            event_user(0);
        }
    }
    customer = collision_circle(x,y,16,obj_customer,false,true)
    if (
        customer 
        and 
        customer.reversed == false 
        and
        path_get_point_x(path,path_get_number(path)-1) == 
        path_get_point_x(customer.path,path_get_number(customer.path)-1)
        and
        path_get_point_y(path,path_get_number(path)-1) == 
        path_get_point_y(customer.path,path_get_number(customer.path)-1) 
        and
        (1 - customer.path_position)*path_get_length(customer.path) &lt;= 
        (1 - path_position)*path_get_length(path)) {
            path_speed = 0;
            if (collision_point(x ,y ,objFloor ,false ,true )) {
                happiness -= 0.01
            } else {
                happiness -= 0.02
            }
            if (happiness == -5) alarm[0] = 1;
    } else {
        path_speed = 1;
    }
} else if reversed == false {
    reversed = true;
    path_clear_points(path);
    path = path_add();
    var inst = openChair();
    if mp_grid_path(grid,path,x,y,inst.x,inst.y,1) {
        path_start(path,1+random(2),false,false);
    } else {
        path_start(path,1+random(2),false,false);
        reversed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_chair">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = other.depth-1;

if (image_speed == 0) {
    var table = instance_nearest(x,y,obj_table);
    var tableDir = point_direction(x,y,table.x,table.y);
    if(direction &lt; tableDir){
        direction+=1
    }
    if(direction &gt; tableDir){
        direction-=1
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (thirsty == true and enjoy == true) {
    var text = "I'm still thirsty"
    drawSpeachBubble(text);
}
if (reversed == true and hasCoffee == false) {
    var text = "I'm sick of waiting"
    drawSpeachBubble(text);
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*customer = collision_circle(x,y,16,obj_customer,false,true)
    if (customer) {
draw_text(x,y,(1 - customer.path_position)*path_get_length(customer.path));
draw_text(x,y+32,
    (1- path_position)*path_get_length(path));
    }*/
    //draw_circle(x,y,16,true);
    
    if (hasCoffee) sprite_index = spr_customercoffee;
    else sprite_index = spr_customer1;
    image_speed = path_get_length(path_index)*(path_position - path_positionprevious)/6;
    image_angle = direction-90;
    if (image_speed == 0) image_index = 0;
    if (image_alpha &lt; 1) image_alpha += 0.01
    draw_self();

    //draw_set_color(c_black);
    //draw_curve(x-10,y+5,x+10,y+5,happiness*-15,14);
    //draw_circle(x-5,y-5,1,false);
    //draw_circle(x+5,y-5,1,false);
    
    if (showGrid) {
        //mp_grid_draw(grid);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>showGrid = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>showGrid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
