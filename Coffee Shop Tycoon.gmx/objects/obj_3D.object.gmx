<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quad = 0
height = 20;
rotation = 90;
sDepth = depth
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.heightMod &gt; 0) {
    if ( 0 &lt; rotation and rotation &lt;= 90 ) {
        quad = 1
        depth = x-y-1000
    }
    if ( 90 &lt; rotation and rotation &lt;= 180 ) {
        quad = 2
        depth = -x-y-1000
    }
    if ( 180 &lt; rotation and rotation &lt;= 270 ) {
        quad = 3
        depth = x+y-1000
    }
    if ( 270 &lt; rotation and rotation &lt;= 360 ) {
        quad = 4
        depth = x+y-1000
    }
} else {
    depth = sDepth;
}

rotation = global.rotation;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.heightMod &gt; 0) {
    dx = global.heightMod*height*cos(rotation * pi/180);
    dy = global.heightMod*height*sin(rotation * pi/180);
    
    mask_width=bbox_right-bbox_left;
    mask_height=bbox_bottom-bbox_top;
    
    x2 = bbox_right// + mask_width/2;
    y2 = bbox_bottom// + mask_height/2;
    
    
    x1 = bbox_left// - mask_width/2
    y1 = bbox_top// - mask_height/2;
    /*
    if (image_angle == 90 or image_angle == 270) {
        x2 = x + mask_height/2;
        y2 = y + mask_width/2;
        
        x1 = x - mask_height/2;
        y1 = y - mask_width/2;
    }*/
    
    outline = false
    if (quad==2 or quad==3) {
        draw_set_color(c_gray)
        draw_triangle(x2,y1,x2,y2,x2+dx,y2-dy,outline);
        draw_triangle(x2+dx,y1-dy,x2+dx,y2-dy,x2,y1,outline);
    }
    if (quad==3 or quad==4) {
        draw_set_color(c_ltgray)
        draw_triangle(x1,y1,x2,y1,x2+dx,y1-dy,outline);
        draw_triangle(x1,y1,x1+dx,y1-dy,x2+dx,y1-dy,outline);
    }
    if (quad==1 or quad==4) {
        draw_set_color(c_gray)
        draw_triangle(x1,y1,x1,y2,x1+dx,y1-dy,outline);
        draw_triangle(x1,y2,x1+dx,y2-dy,x1+dx,y1-dy,outline);
    }
    if (quad==1 or quad==2) {
        draw_set_color(c_ltgray)
        draw_triangle(x1,y2,x2,y2,x1+dx,y2-dy,outline);
        draw_triangle(x1+dx,y2-dy,x2+dx,y2-dy,x2,y2,outline);
    }
    //draw_rectangle(x1+1,y2-mask_height/2,x2-1,y1-dy+mask_height/2,false)
    //draw_ellipse(x1,y1,x2,y2,false);
    circle = false;
    if (circle) {
        draw_sprite_ext(sprite_index,image_single,x+dx,y-dy,1,1,rotation,c_white,1);
    }
    //draw_sprite(sprite_index,0,x+dx,y-dy);

    draw_sprite_ext(sprite_index,image_single,x+dx,y-dy,1,1,image_angle,c_white,1);
} else {
    draw_self();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
