<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_customer1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

coffees = 0;
coffeeBeans = 0;
moving = false;


workTimer = -1;

setGrid();
ppath = -100;
showGrid = false;


task = W_MAKE_COFFEE;
state = S_WAITING;

// moving state
destX = 0;
destY = 0;

// performing state
timer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = false;
state = S_WAITING;
//alarm[0]= random(10)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (state == S_WAITING) {
    
    var previousTask = task;
    
    if (previousTask == W_PICK_COFFEE and coffeeBeans == 0) {
        
        var field = openHarvest();
        destX = field.x
        destY = field.y
        task = W_PICK_COFFEE;
        
    } else if (coffees == 0) {
        
        var coffeeMachine = instance_nearest(x,y,getTObject(obj_coffeeMachine));
        var i = 1
        repeat (instance_number(getTObject(obj_coffeeMachine))) {
            if (coffeeMachine.coffeeCount &gt; 0) break;
                i = i + 1;
                coffeeMachine = instance_nearest_nth(x,y,getTObject(obj_coffeeMachine),i);
        }
        setGrid();
        
        if (coffeeMachine.rawCoffee &lt;= obj_variableManager.coffeeAmount and
            coffeeBeans &lt;= 0 and coffeeMachine.coffeeCount &lt; 2) {
            var field = openHarvest();
            destX = field.x
            destY = field.y
            task = W_PICK_COFFEE;
        } else {
            destX = coffeeMachine.x
            destY = coffeeMachine.y
            if (coffeeBeans &gt; 0) task = W_RETURN_COFFEEBEANS;
            else task = W_MAKE_COFFEE; 
        }
        
    } else {
        
        var inst = instance_nearest(x,y,getTObject(obj_cashier));
        setGrid();
        cashRegisters = nearestInstances(x,y,getTObject(obj_cashier),instance_number(getTObject(obj_cashier)));
        var size = ds_list_size(cashRegisters);
        for (i = 0; i &lt; size; i += 1){
            var cr = ds_list_find_value(cashRegisters,i);
            if (cr.coffeeCount == 0) {
                inst = cr;  
            }
        }

        destX = inst.x
        destY = inst.y
        task = W_SERVE_COFFEE;
        
    }
    
    alarm[0] = 400;
    moveToPoint(x,y,destX,destY,2);
    state = S_MOVING;
    
} else if (state == S_MOVING) {
    
    if (distance_to_point(destX,destY) &lt;= 1) {
        state = S_PERFORMING;
        timer = 100;
    }
    // check if reached objective and if yes change state to performing

} else if (state == S_PERFORMING) {

    // check if done performing if so set next task and wait
    timer--;
    if (timer &lt;= 0) {
        if (task == W_PICK_COFFEE) {
        
            var field = instance_nearest(x,y,obj_field);
            if (field.harvest == true) {
                field.harvest = false;
                field.alarm[0] = 1;
                coffeeBeans += 10;
            }
            
        } else if (task == W_MAKE_COFFEE) {
        
            var coffeeMachine = instance_nearest(x,y,getTObject(obj_coffeeMachine));
            var take = min(coffeeMachine.coffeeCount, 3);
            with coffeeMachine {
                coffeeCount -= take;
            }
            coffees += take;
            var textObj =  instance_create(x,y,obj_text);
            textObj.text = "-$" + string(costFormula((getTObject(obj_variableManager)).waterTemp,(getTObject(obj_variableManager)).brewTime,(getTObject(obj_variableManager)).coffeeAmount) * take);
            textObj.color = c_red;
            (getTObject(obj_variableManager)).money -= 
                costFormula((getTObject(obj_variableManager)).waterTemp,
                            (getTObject(obj_variableManager)).brewTime,
                            (getTObject(obj_variableManager)).coffeeAmount) * take;
        
        } else if (task == W_SERVE_COFFEE) {
        
            var inst = instance_nearest(x,y,getTObject(obj_cashier));
            with inst {
                for (var i = 0; i &lt; other.coffees; i++) {
                    event_user(1);
                }
            }
            coffees = 0;
            
        } else if (task == W_RETURN_COFFEEBEANS) {
            
            var coffeeMachine = instance_nearest(x,y,getTObject(obj_coffeeMachine));
            coffeeMachine.rawCoffee += coffeeBeans;
            coffeeBeans = 0;
        
        }
        
        state = S_WAITING;
    }
    
}

if (collision_circle(x,y,14,obj_worker,false,true)) {
    var near = instance_nearest(x,y,obj_worker)
    if (near.path_speed == 1) {
        path_speed = 0.5;
    }
} else {
    path_speed = 1;
    if (path_index == -1) {
        moving = false;
    }
}



exit;


////////////////////// OLD LOGIC BEFORE STATEMACHINE

if (coffees == 0) {

    var coffeeMachine = instance_nearest(x,y,getTObject(obj_coffeeMachine));
    var i = 1
    if (moving == false) {
        repeat (instance_number(getTObject(obj_coffeeMachine))) {
        if (coffeeMachine.coffeeCount &gt; 0) break;
            i = i + 1;
            coffeeMachine = instance_nearest_nth(x,y,getTObject(obj_coffeeMachine),i);
        }
        setGrid();
        if (coffeeMachine.rawCoffee &lt;= obj_variableManager.coffeeAmount and
            coffeeBeans &lt;= 0 and coffeeMachine.coffeeCount &lt; 2) {
            var field = openHarvest();
            moveToPoint(x,y,field.x,field.y,1+random(2));
        } else {
            moveToPoint(x,y,coffeeMachine.x,coffeeMachine.y,1+random(2));
        }
        moving = true;
        alarm[0] = 400;
    }
    
    if (distance_to_object(coffeeMachine) &lt;= 3 and coffeeMachine.coffeeCount &gt; 0) {
        moving = false;
        var take = min(coffeeMachine.coffeeCount, 3);
        with coffeeMachine {
            coffeeCount -= take;
        }
        coffees += take;
        var textObj =  instance_create(x,y,obj_text);
        textObj.text = "-$" + string(costFormula((getTObject(obj_variableManager)).waterTemp,(getTObject(obj_variableManager)).brewTime,(getTObject(obj_variableManager)).coffeeAmount) * take);
        textObj.color = c_red;
        (getTObject(obj_variableManager)).money -= costFormula((getTObject(obj_variableManager)).waterTemp,(getTObject(obj_variableManager)).brewTime,(getTObject(obj_variableManager)).coffeeAmount) * take;
    }
    
    if (distance_to_object(coffeeMachine) &lt;= 1 and coffeeBeans &gt; 0) {
        moving = false;
        coffeeMachine.rawCoffee += coffeeBeans;
        coffeeBeans = 0;
    }
    
    var field = instance_nearest(x,y,obj_field);
    if (distance_to_object(field) &lt;= 1 and coffeeBeans == 0) {
        if (field.harvest == true) {
            moving = false;
            field.harvest = false;
            field.alarm[0] = 1;
            coffeeBeans += 10;
        } else {
            var field = openHarvest();
            moveToPoint(x,y,field.x,field.y,1+random(2));
        }
    }
    
} else {

    var inst = instance_nearest(x,y,getTObject(obj_cashier));
    if (moving == false) {
        setGrid();

        cashRegisters = nearestInstances(x,y,getTObject(obj_cashier),instance_number(getTObject(obj_cashier)));
        var size = ds_list_size(cashRegisters);
        for (i = 0; i &lt; size; i += 1){
            var cr = ds_list_find_value(cashRegisters,i);
            //var coffees = ;
            if (cr.coffeeCount == 0) {
                inst = cr;  
            }
        }
        
        moveToPoint(x,y,inst.x,inst.y,1+random(2));
        moving = true;
        alarm[0] = 400;
    }
    
    if (distance_to_object(inst) &lt;= 5) {
        if (workTimer == -1) {
            workTimer = 100;
        } else if (workTimer == 0) {
            moving = false;
            with inst {
                for (var i = 0; i &lt; other.coffees; i++) {
                    event_user(1);
                }
            }
            coffees = 0;
            workTimer = -1;
        } else {
            workTimer -= 1;
        }

    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = path_get_length(path_index)*(path_position - path_positionprevious)/6;
image_angle = direction-90;
draw_self()
draw_path(path,0,0,true);
if (timer &gt; 0) {
    draw_rectangle(x-16,y-22,x-16+timer/100*32,y-18,false);
}

if (showGrid) {
    mp_grid_draw(grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>showGrid = not showGrid;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
